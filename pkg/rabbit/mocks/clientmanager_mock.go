// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/rabbit/clientmanager.go

// Package mocks is a generated GoMock package.
package mocks

import (
	rabbit "konntent-workspace-service/pkg/rabbit"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCloser is a mock of Closer interface.
type MockCloser struct {
	ctrl     *gomock.Controller
	recorder *MockCloserMockRecorder
}

// MockCloserMockRecorder is the mock recorder for MockCloser.
type MockCloserMockRecorder struct {
	mock *MockCloser
}

// NewMockCloser creates a new mock instance.
func NewMockCloser(ctrl *gomock.Controller) *MockCloser {
	mock := &MockCloser{ctrl: ctrl}
	mock.recorder = &MockCloserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloser) EXPECT() *MockCloserMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockCloser) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockCloserMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCloser)(nil).Close))
}

// MockProcessor is a mock of Processor interface.
type MockProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockProcessorMockRecorder
}

// MockProcessorMockRecorder is the mock recorder for MockProcessor.
type MockProcessorMockRecorder struct {
	mock *MockProcessor
}

// NewMockProcessor creates a new mock instance.
func NewMockProcessor(ctrl *gomock.Controller) *MockProcessor {
	mock := &MockProcessor{ctrl: ctrl}
	mock.recorder = &MockProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessor) EXPECT() *MockProcessorMockRecorder {
	return m.recorder
}

// ExchangeDeclare mocks base method.
func (m *MockProcessor) ExchangeDeclare(values rabbit.ExchangeDeclarationValues) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExchangeDeclare", values)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExchangeDeclare indicates an expected call of ExchangeDeclare.
func (mr *MockProcessorMockRecorder) ExchangeDeclare(values interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangeDeclare", reflect.TypeOf((*MockProcessor)(nil).ExchangeDeclare), values)
}

// QueueBind mocks base method.
func (m *MockProcessor) QueueBind(values rabbit.QueueBindValues) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueBind", values)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueBind indicates an expected call of QueueBind.
func (mr *MockProcessorMockRecorder) QueueBind(values interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueBind", reflect.TypeOf((*MockProcessor)(nil).QueueBind), values)
}

// QueueDeclare mocks base method.
func (m *MockProcessor) QueueDeclare(values rabbit.QueueDeclarationValues) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueDeclare", values)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueDeclare indicates an expected call of QueueDeclare.
func (mr *MockProcessorMockRecorder) QueueDeclare(values interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueDeclare", reflect.TypeOf((*MockProcessor)(nil).QueueDeclare), values)
}
