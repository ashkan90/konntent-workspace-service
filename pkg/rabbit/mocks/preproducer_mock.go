// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/rabbit/preproducer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	app "konntent-workspace-service/configs/app"
	rabbit "konntent-workspace-service/pkg/rabbit"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPreProducer is a mock of PreProducer interface.
type MockPreProducer struct {
	ctrl     *gomock.Controller
	recorder *MockPreProducerMockRecorder
}

// MockPreProducerMockRecorder is the mock recorder for MockPreProducer.
type MockPreProducerMockRecorder struct {
	mock *MockPreProducer
}

// NewMockPreProducer creates a new mock instance.
func NewMockPreProducer(ctrl *gomock.Controller) *MockPreProducer {
	mock := &MockPreProducer{ctrl: ctrl}
	mock.recorder = &MockPreProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPreProducer) EXPECT() *MockPreProducerMockRecorder {
	return m.recorder
}

// Config mocks base method.
func (m *MockPreProducer) Config() *app.RabbitQueueSettings {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(*app.RabbitQueueSettings)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockPreProducerMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockPreProducer)(nil).Config))
}

// SetupQueues mocks base method.
func (m *MockPreProducer) SetupQueues(manager rabbit.Processor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetupQueues", manager)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetupQueues indicates an expected call of SetupQueues.
func (mr *MockPreProducerMockRecorder) SetupQueues(manager interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupQueues", reflect.TypeOf((*MockPreProducer)(nil).SetupQueues), manager)
}
