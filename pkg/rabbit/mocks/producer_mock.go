// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/rabbit/producer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	rabbit "konntent-workspace-service/pkg/rabbit"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// ConnectToBroker mocks base method.
func (m *MockClient) ConnectToBroker(connectionString string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectToBroker", connectionString)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConnectToBroker indicates an expected call of ConnectToBroker.
func (mr *MockClientMockRecorder) ConnectToBroker(connectionString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectToBroker", reflect.TypeOf((*MockClient)(nil).ConnectToBroker), connectionString)
}

// Consume mocks base method.
func (m *MockClient) Consume(ctx context.Context, handler rabbit.ConsumerGroupHandler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", ctx, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// Consume indicates an expected call of Consume.
func (mr *MockClientMockRecorder) Consume(ctx, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockClient)(nil).Consume), ctx, handler)
}

// PublishOnQueue mocks base method.
func (m *MockClient) PublishOnQueue(msg []byte, eventType string, ttl int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishOnQueue", msg, eventType, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishOnQueue indicates an expected call of PublishOnQueue.
func (mr *MockClientMockRecorder) PublishOnQueue(msg, eventType, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishOnQueue", reflect.TypeOf((*MockClient)(nil).PublishOnQueue), msg, eventType, ttl)
}

// MockSync is a mock of Sync interface.
type MockSync struct {
	ctrl     *gomock.Controller
	recorder *MockSyncMockRecorder
}

// MockSyncMockRecorder is the mock recorder for MockSync.
type MockSyncMockRecorder struct {
	mock *MockSync
}

// NewMockSync creates a new mock instance.
func NewMockSync(ctrl *gomock.Controller) *MockSync {
	mock := &MockSync{ctrl: ctrl}
	mock.recorder = &MockSyncMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSync) EXPECT() *MockSyncMockRecorder {
	return m.recorder
}

// Consume mocks base method.
func (m *MockSync) Consume(ctx context.Context, handler rabbit.ConsumerGroupHandler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", ctx, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// Consume indicates an expected call of Consume.
func (mr *MockSyncMockRecorder) Consume(ctx, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockSync)(nil).Consume), ctx, handler)
}
