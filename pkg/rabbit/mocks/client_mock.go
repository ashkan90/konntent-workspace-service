// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/rabbit/client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	rabbit "konntent-workspace-service/pkg/rabbit"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	amqp "github.com/streadway/amqp"
)

// MockClientConnector is a mock of ClientConnector interface.
type MockClientConnector struct {
	ctrl     *gomock.Controller
	recorder *MockClientConnectorMockRecorder
}

// MockClientConnectorMockRecorder is the mock recorder for MockClientConnector.
type MockClientConnectorMockRecorder struct {
	mock *MockClientConnector
}

// NewMockClientConnector creates a new mock instance.
func NewMockClientConnector(ctrl *gomock.Controller) *MockClientConnector {
	mock := &MockClientConnector{ctrl: ctrl}
	mock.recorder = &MockClientConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientConnector) EXPECT() *MockClientConnectorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockClientConnector) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClientConnectorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClientConnector)(nil).Close))
}

// Connect mocks base method.
func (m *MockClientConnector) Connect(connectionString string) (rabbit.ClientManager, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", connectionString)
	ret0, _ := ret[0].(rabbit.ClientManager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect.
func (mr *MockClientConnectorMockRecorder) Connect(connectionString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockClientConnector)(nil).Connect), connectionString)
}

// MockClientManager is a mock of ClientManager interface.
type MockClientManager struct {
	ctrl     *gomock.Controller
	recorder *MockClientManagerMockRecorder
}

// MockClientManagerMockRecorder is the mock recorder for MockClientManager.
type MockClientManagerMockRecorder struct {
	mock *MockClientManager
}

// NewMockClientManager creates a new mock instance.
func NewMockClientManager(ctrl *gomock.Controller) *MockClientManager {
	mock := &MockClientManager{ctrl: ctrl}
	mock.recorder = &MockClientManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientManager) EXPECT() *MockClientManagerMockRecorder {
	return m.recorder
}

// Channel mocks base method.
func (m *MockClientManager) Channel() (*amqp.Channel, rabbit.Closer) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Channel")
	ret0, _ := ret[0].(*amqp.Channel)
	ret1, _ := ret[1].(rabbit.Closer)
	return ret0, ret1
}

// Channel indicates an expected call of Channel.
func (mr *MockClientManagerMockRecorder) Channel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Channel", reflect.TypeOf((*MockClientManager)(nil).Channel))
}

// Consume mocks base method.
func (m *MockClientManager) Consume(values rabbit.ConsumeValues) (<-chan amqp.Delivery, rabbit.Closer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", values)
	ret0, _ := ret[0].(<-chan amqp.Delivery)
	ret1, _ := ret[1].(rabbit.Closer)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Consume indicates an expected call of Consume.
func (mr *MockClientManagerMockRecorder) Consume(values interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockClientManager)(nil).Consume), values)
}

// Processor mocks base method.
func (m *MockClientManager) Processor() rabbit.Processor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Processor")
	ret0, _ := ret[0].(rabbit.Processor)
	return ret0
}

// Processor indicates an expected call of Processor.
func (mr *MockClientManagerMockRecorder) Processor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Processor", reflect.TypeOf((*MockClientManager)(nil).Processor))
}

// Publish mocks base method.
func (m *MockClientManager) Publish(values rabbit.PublishValues) (rabbit.Closer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", values)
	ret0, _ := ret[0].(rabbit.Closer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Publish indicates an expected call of Publish.
func (mr *MockClientManagerMockRecorder) Publish(values interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockClientManager)(nil).Publish), values)
}
